
import std;

let passed_count:int = 0;
let total_count:int = 0;

def pass_test()->nil {
    printf("Test case %d: passed. ", [total_count]),
    set passed_count = @addi(passed_count, 1),
    set total_count = @addi(total_count, 1)
};

def fail_test()->nil {
    printf("Test case %d: failed. ", [total_count]),
    set total_count = @addi(total_count, 1)
};

def require(v:int, msg:String)->nil {
    @get<function(nil)>([
        \()->{pass_test(), print(msg), print("\n")}, 
        \()->{fail_test(), print(msg), print("\n")}
    ], 
    @eqi(v, 0)
    )()
};

let summary = \()->{
    printf("Total %d cases, %d passed, %d failed\n", 
    [total_count, passed_count, @subi(total_count, passed_count)])
};

# Literals

let vi1:int = 1;
let vi2:int = -1;
let vf1:float = 1.00;
let vc1:char = 'a';
let vc2:char = '\n';
let vs1:array(char) = "";
let vs2:array(char) = "12345";

# Let/set

require(@eqi(vi1, 1), "1=1");
require(@eqi(vi2, -1), "-1=-1");
require(@eqf(vf1, 1.00), "1.00=1.00");

set vi2 = vi1;
require(@eqi(vi2, vi1), "vi2=vi1");

# Type conversion

require(@eqi(@ctoi('1'), 49), "char2int");
require(@eqi(@ctoi(@itoc(49)), 49), "int2char");
require(@eqf(@ctof('1'), 49.0), "char2float");
require(@eqf(@itof(-5), -5.0), "int2float");
require(@eqi(@ftoi(123.9), 123), "float2int");

# Basic Subtyping

let vo1:top = 1;
let vo2:top = 1.0;
let vo3:top = true;
let vo4:top = ["12345"];

set vo1 = "abc";
set vo2 = [[1]];

let vao1:array(top) = [1,2,3];
set vao1 = ['2','3','4'];

let vto1:tuple(top, top);
let vt1:tuple(int, int);
set vto1 = vt1;

let vf2:function(int, int);
let vf3:function(int, top);
set vf3 = vf2;

# Expression: Aggresion types

let vai1:array(Int) = [];
let vaii1:array(array(Int)) = [[]];
set vaii1 = [[5]];
set vaii1 = [[5, 6], [4], []];

let vtoo:tuple(top, top) = (1, '2');
let vtia:tuple(Int, String) = (1, "2");

# Expression: Lambda

let vfii1:function(int, int, int) = \(x:int, y:int)->@addi(x, y):int;
let vfii2:function(int, int, int) = \(x:int, y:int)->{
    set x = @addi(x, 1), @addi(x, y)
}:int;
let vfi1:function(int) = \()->{let a:int =2, a};
let vfi2:function(int) = \()->{vi1}:int;

require(@eqi(2, vfii1(1, 1)), "1+1=2");
require(@eqi(3, vfii2(3, -1)), "4-1=3");
require(@eqi(2, vfi1()), "2=2");
require(@eqi(1, vfi2()), "1=1");

# Basic library functions

require(@eqi(@addi(1, 1), 2), "add");
require(@eqi(@subi(3, 1), 2), "sub");
require(@eqi(@muli(-5, -7), 35), "mul");
require(@eqi(@divi(6, 4), 1), "div");
require(@eqi(@modi(6, 5), 1), "mod");
require(@eqi(@negi(5), -5), "neg");
require(@eqi(@and(1, 0), 0), "and");
require(@eqi(@or(1, 0), 1), "or");
require(@eqi(@xor(1, 0), 1), "xor");
require(@eqi(@not(1), 0), "not");
require(@nei(1, 2), "!=");
require(@lti(1, 2), "<");
require(@lei(1, 2), "<=");
require(@gti(2, -1), ">");
require(@gei(-1, -1), ">=");
require(@eqf(@addf(1.0, 1.0), 2.0), "addf");
require(@eqf(@subf(3.0, 1.0), 2.0), "subf");
require(@eqf(@mulf(-5.0, -7.0), 35.0), "mulf");
require(@eqf(@divf(6.0, 4.0), 1.5), "divf");
require(@eqf(@modf(6.0, 5.0), 1.0), "modf");
require(@eqf(@negf(5.0), -5.0), "negf");
require(@nef(1.0, 2.0), "!=");
require(@ltf(1.0, 2.0), "<");
require(@lef(1.0, 2.0), "<=");
require(@gtf(2.0, -1.0), ">");
require(@gef(-1.0, -1.0), ">=");

let va:array(int) = @arrayi(3);
@aseti(va, 2, 5);
require(@eqi(@ageti(va, 2), 5), "aseti");
require(@eqi(@len(va), 12), "len");

let float_arr = @arrayf(1);
@asetf(float_arr, 0, 123.45678);
let s:array(char) = @format("% -+5.5f", float_arr);
require(@eqi(@ctoi(@aget(s, 4)), 46), "format");
require(@eqi(@ctoi(@aget(s, 9)), 56), "format");

require(@eqi(@bool(100), 1), "bool");
let va2 = @alloc<function(int, int)>(3);
@set<function(int,int)>(va2, 2, @negi);
require(@eqi(@get<function(int, int)>(va2, 2)(1), -1), "get/set");

let va3_src = [1,2,3];
let va3_dst = [4,5,6];
@copy(va3_src, 4, 8, va3_dst, 4);
require(@eqi(@muli(aget<Int>(va3_dst, 0).__value, @muli(aget<Int>(va3_dst, 1).__value, aget<Int>(va3_dst, 2).__value)), 24)
, "copy");

# interfaces

interface I0 {
    a:int,
    b:float
};
let int_1:int = 1;
let float_2:float = 2.0;
let i0:I0 = {a=int_1, b=float_2};
require(@eqi(i0.a, 1), "getfield");

def f<X implements I0>(x:X)->int {
    x.a
};

interface I1 extends I0 {
    c:Int
};

require(@eqi(f<I0>(i0), 1), "interface");
require(@eqi(f<I0>({a=int_1, b=float_2}), 1), "interface");
require(@eqi(f<I1>({a=int_1, b=float_2, c=3}), 1), "interface");

# classes

interface I3 {
    val2:float
};

class C1 {
    val:int,
    new (val:int) -> {set self.val = val}
};
class C2 extends C1 implements I3 {
    val2:float,
    new (val:int, val2:float) extends C1(val) -> {set self.val2 = val2}
};

let c1 = new C1(1);
let c2:C1 = new C2(2, 2.0);
let c3:C2 = new C2(3, 4.0);
require(@eqi(c1.val, 1), "class");
require(@eqi(c2.val, 2), "class");
require(@eqf(c3.val2, 4.0), "class");

let requireb = \(v:Bool, s:String)->require(v.__value, s);

requireb(True, "bool");
requireb(True.eq(True), "bool");
requireb(True.eq(not(False)), "bool");

# system F

def ff(f:forall<X>.function(X,X))->forall<X>.function(X,X){
    \<X>(x:X)->f(f(x))
};
let uv5 = \f:forall<X,Y>.function(X,Y,Y) -> \<X>(x:X) -> (f(x,1), f(x,'2'));
let uv5_2 = \f:forall<X,Y>.function(X,Y,X) -> \<X>(x:X) -> (f(x,1), f(x,'2'));

require(@eqi( ff(\<X>(x:X)->x:X)<I0>(i0).a, 1), "rank 2 function");
requireb(fst<Int, Char>(uv5(seq)(3)).eq(1), "type inferrence");
requireb(fst<Float, Float>(uv5_2(const)(2.0)).eq(2.0), "type inferrence");

# system library functions

requireb(id(True), "id");
requireb(const(True, False), "const");
requireb(seq(False, True), "seq");
requireb(dot<Bool,Bool,Bool>(not, not)(True), "dot");

requireb(fst<Bool,Bool>((True, False)), "fst");
requireb(fst<Bool,Bool>(snd<Bool,tuple(Bool,Bool)>((False, (True, False)))), "snd");

let curried_and = curry<Bool,Bool,Bool>(and);
requireb(curried_and(True)(True), "curry");
let uncurried_and = uncurry<Bool,Bool,Bool>(curried_and);
requireb(not(uncurried_and(True, False)), "uncurry");

let arr = [False, False];
aset<Bool>(arr, 0, True);
requireb(aget<Bool>(arr, 0), "aget/aset");

let lt_c1 = \(lhs:C1, rhs:C1)->new Bool(@lti(lhs.val, rhs.val));
requireb(lt_c1(new C1(1), new C1(2)), "flip");
requireb(flip<C1,C1,Bool>(lt_c1)(new C1(2), new C1(1)), "flip");

requireb(sel<Bool>(False, False, True), "sel");

let one_c1 = new C1(1);
let mul_c1 = \(lhs:C1, rhs:C1)->new C1(@muli(lhs.val, rhs.val));
let dec_c1 = \lhs:C1->new C1(@subi(lhs.val, 1));
let equals_c1 = \(lhs:C1, rhs:C1)->new Bool(@eqi(lhs.val, rhs.val));

let fact = \(cont:function(C1,C1))->{
    \val:C1->sel<function(C1)>(
        lt_c1(val, one_c1), 
            \()->one_c1, 
            \()->mul_c1(val, cont(dec_c1(val))))()
};
requireb(equals_c1(fix<C1>(fact)(new C1(5)), new C1(120)), "fix");

requireb(equals_c1(until<C1>(
    \x:C1->lt_c1(new C1(100), x),
    \x:C1->mul_c1(x, new C1(2))
    )(one_c1), new C1(128)), "until");

# Case Expressions

let my_if = \<X>(c:Bool, ctrue:X, cfalse:X)->case c {
    true -> ctrue,
    false -> cfalse
};

requireb(my_if(True, True, False), "case #1");
requireb(my_if(False, False, True), "case #1");

let quadrant = \(x:Int, y:Int)->
case (x, y) {
    (0, b) -> 5,
    (a, 0) -> 6,
    (a, b) when not(or(a.lt(0), b.lt(0))) -> 1,
    (a, b) when and(a.lt(0), not(b.lt(0))) -> 2,
    (a, b) when and(a.lt(0), b.lt(0)) -> 3,
    otherwise -> 4
};

requireb(quadrant(1, 2).eq(1), "case #2");
requireb(quadrant(-1, 2).eq(2), "case #2");
requireb(quadrant(1, -2).eq(4), "case #2");
requireb(quadrant(-1, -2).eq(3), "case #2");
requireb(quadrant(0, 2).eq(5), "case #2");
requireb(quadrant(1, 0).eq(6), "case #2");

class Shape {
    is_circle:Bool,
    d: array(Float),
    new(x:Float, y:Float, is_circle:Bool)->{
        case is_circle {
            true -> \->{set self.d = [x]}(),
            false -> \->{set self.d = [x, y]}()
        },
        set self.is_circle = is_circle
    }
};

let area = \s:Shape -> case s {
    {is_circle=true, d=d} -> aget<Float>(d, 0).mul(aget<Float>(d, 0)).mul(pi),
    {is_circle=false, d=d} -> aget<Float>(d, 0).mul(aget<Float>(d, 1))
};

let circle = new Shape(1.0, 2.0, True);
let square = new Shape(2.0, 2.0, False);

requireb(circle.is_circle, "case #3");
requireb(not(square.is_circle), "case #3");
requireb(area(circle).eq(3.1415926), "case #3");
requireb(area(square).eq(4.0), "case #3");


summary();
@exit();
