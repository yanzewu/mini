
# Syntax of Mini v0.3

general_block := class_decl ';'
        | interface_decl ';'
        | var_decl ';'
        | function_decl ';'
        | import_decl ';'
        | expr ';'

# Import

import_decl := 'import' id
        | 'import' import_list
import_list := id
        | import_list '.' id

# Classes

class_decl := 'class' id class_decorator* class_body
        
class_decorator := 'implements' type
        | 'extends' type

class_body := '{' decl_list? '}'

decl_list = decl_within_class
        | decl_list ',' decl_within_class

decl_within_class = decl_decorator? id type_annotation
        | constructor

constructor = 'new' '(' arg_decl_list? ')' constructor_decorator? '->' '{' function_body '}'
        | 'new' '(' arg_decl_list? ')' constructor_decorator? '->' stmt

constructor_decorator = 'extends' id '(' arg_list? ')'

decl_decorator := 'virtual'

# Interfaces

interface_decl := 'interface' id interface_decorator? interface_body

interface_decorator := 'extends' id_list

id_list := id
        | id_list ',' id

interface_body := '{' interface_decl_list? '}'

interface_decl_list := interface_decl_list ',' id type_annotation

# Variable definition and expression

var_decl := 'let' id type_annotation? '=' expr
        | 'let' id type_annotation

type_expr := type       # in future will add support dynamic types

type_annotation := ':' type

type := id
        | id '(' type_list ')'
        | 'forall' universal_quantifier '.' id
        | 'forall' universal_quantifier '.' id '(' type_list ')'

type_list := type
        | type_list ',' type

expr := var
        | expr '(' arg_list? ')'
        | expr '.' id
        | '(' expr ')'
        | expr '<' type_expr_list '>'

arg_list := expr
        | arg_list ',' expr

var := id
        | value

value := intliteral                     # both positive and negative
        | floatliteral
        | charliteral
        | lambda
        | array
        | tuple
        | structure
        | '(' ')'       # equivalent to nil
        | 'nil'

array := '[' array_content? ']'
array_content := expr
        | array_content ',' expr

tuple := '(' tuple_content ')'
tuple_content := expr ',' expr         # tuple size must > 1
        | tuple_content ',' expr

structure := '{' structure_content? '}'
structure_content := id '=' expr
        | structure_content ',' id '=' expr

# Functions

function_decl := 'def' id universal_quantifier? '(' arg_decl_list? ')' '->' type '{' function_body '}'
        | 'def' id universal_quantifier? '(' arg_decl_list? ')' '{' function_body '}'

lambda := '\' '->' expr type_annotation?
        | '\' universal_quantifier? capture '->' expr type_annotation?
        | '\' universal_quantifier? capture '->' '{' function_body '}' type_annotation? # the types are greedy matched

capture := id type_annotation
        | '(' arg_decl_list? ')'

arg_decl_list := id type_annotation
        | arg_decl_list ',' id type_annotation

function_body := stmt                   # function body cannot be empty
        | function_body ',' stmt

stmt := expr
        | var_decl
        | function_decl
        | set_stmt

set_stmt := 'set' id '=' expr
        | 'set' expr '.' id '=' expr


# Universal Types

universal_quantifier := '<' type_arg_list '>'

type_arg_list := type_arg_list ',' id
        | type_arg_list ',' id 'implements' type

type_expr_list = type_expr
        | type_expr_list ',' type_expr
